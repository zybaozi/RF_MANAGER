#include <U8g2lib.h>
#include "global.h"

#define SCL 5
#define SDA 4




//设置屏幕的信息
//0.96OLED 屏幕
U8G2_SSD1306_128X64_NONAME_F_SW_I2C u8g2(U8G2_R0, /* clock=*/SCL, /* data=*/SDA, /* reset=*/U8X8_PIN_NONE);



//屏幕初始化
void u8g2begin() {

  u8g2.begin();            //初始化屏幕驱动
  u8g2.enableUTF8Print();  //输出屏幕字体为UTF8
}
//四个logo
const unsigned char logo1_bits[] = {
  0x00, 0x00, 0x00, 0xe0, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfc, 0x7f, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x0f, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x03, 0xc0, 0x03, 0x00, 0x00,
  0x00, 0x00, 0xc0, 0x01, 0x00, 0x07, 0x00, 0x00, 0x00, 0x00, 0x60, 0x00, 0x00, 0x06, 0x00, 0x00,
  0x00, 0x00, 0x70, 0x00, 0x00, 0x0c, 0x00, 0x00, 0x00, 0x00, 0x30, 0x00, 0x00, 0x1c, 0x00, 0x00,
  0x00, 0x00, 0x18, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x18, 0x00, 0x00,
  0x00, 0x00, 0x08, 0x00, 0x00, 0x30, 0x00, 0x00, 0x00, 0x00, 0x0c, 0x00, 0xc0, 0x30, 0x00, 0x00,
  0x00, 0x00, 0x0c, 0x00, 0xc0, 0x30, 0x00, 0x00, 0x00, 0x00, 0x0c, 0x00, 0xc0, 0x30, 0x00, 0x00,
  0x00, 0x00, 0x0c, 0x00, 0xc0, 0x30, 0x00, 0x00, 0x00, 0x00, 0x0c, 0x00, 0xc1, 0x30, 0x00, 0x00,
  0x00, 0x00, 0x0c, 0x80, 0xc1, 0x30, 0x00, 0x00, 0x00, 0x00, 0x0c, 0x80, 0xc1, 0xf0, 0x03, 0x00,
  0x00, 0x80, 0x0f, 0x80, 0xc1, 0xf0, 0x07, 0x00, 0x00, 0xc0, 0x0f, 0x80, 0xc1, 0x70, 0x06, 0x00,
  0x00, 0xe0, 0x0c, 0x82, 0xc1, 0x20, 0x0c, 0x00, 0x00, 0x60, 0x0c, 0x86, 0xc1, 0x20, 0x0c, 0x00,
  0x00, 0x60, 0x0c, 0x86, 0xc1, 0x60, 0x0c, 0x00, 0x00, 0x60, 0x0c, 0x86, 0xc1, 0x60, 0x0c, 0x00,
  0x00, 0x60, 0x0c, 0x06, 0xc1, 0x60, 0x0c, 0x00, 0x00, 0x60, 0x0c, 0x06, 0xc3, 0x60, 0x0c, 0x00,
  0x00, 0x60, 0x0c, 0x06, 0xc3, 0x60, 0x0c, 0x00, 0x00, 0x60, 0x0c, 0x06, 0xc3, 0x60, 0x0c, 0x00,
  0x00, 0x60, 0x08, 0x02, 0x01, 0x60, 0x0e, 0x00, 0x00, 0xe0, 0x1c, 0x00, 0x00, 0xe0, 0x07, 0x00,
  0x00, 0xc0, 0x1f, 0x00, 0x00, 0xe0, 0x03, 0x00, 0x00, 0x80, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x00
};
const unsigned char logo2_bits[] = {
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x02, 0x00, 0x00,
  0x00, 0x00, 0xe0, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x00, 0xe0, 0x00, 0x00, 0x0f, 0x00, 0x00,
  0x00, 0x00, 0xf0, 0x0c, 0x70, 0x0e, 0x00, 0x00, 0x00, 0x00, 0x70, 0x0e, 0xf0, 0x1e, 0x00, 0x00,
  0x00, 0x00, 0x70, 0x8f, 0xf3, 0x1c, 0x00, 0x00, 0x00, 0x00, 0x78, 0xc7, 0xe7, 0x1c, 0x00, 0x00,
  0x00, 0x00, 0x78, 0xc7, 0xe7, 0x1c, 0x00, 0x00, 0x00, 0x00, 0x78, 0xc7, 0xe7, 0x1c, 0x00, 0x00,
  0x00, 0x00, 0x78, 0xc7, 0xe7, 0x1c, 0x00, 0x00, 0x00, 0x00, 0x70, 0xce, 0xf7, 0x1c, 0x00, 0x00,
  0x00, 0x00, 0x70, 0xce, 0x77, 0x1c, 0x00, 0x00, 0x00, 0x00, 0xf0, 0xec, 0x7f, 0x0e, 0x00, 0x00,
  0x00, 0x00, 0xe0, 0xe0, 0x0e, 0x0f, 0x00, 0x00, 0x00, 0x00, 0xe0, 0xf0, 0x0f, 0x07, 0x00, 0x00,
  0x00, 0x00, 0xc0, 0xf0, 0x1f, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf0, 0x1f, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x78, 0x3c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x38, 0x38, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x38, 0x38, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfc, 0x7f, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0xfc, 0x7f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0xff, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x0e, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xe0, 0x01, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x0f, 0xe0, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0xc0, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};
const unsigned char logo3_bits[] = {
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0xf8, 0x1f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0x00, 0x00, 0x00,
  0x00, 0x00, 0xc0, 0xff, 0xff, 0x03, 0x00, 0x00, 0x00, 0x00, 0xf0, 0xff, 0xff, 0x0f, 0x00, 0x00,
  0x00, 0x00, 0xf8, 0x3f, 0xfc, 0x1f, 0x00, 0x00, 0x00, 0x00, 0xfc, 0x03, 0xc0, 0x3f, 0x00, 0x00,
  0x00, 0x00, 0xfe, 0x00, 0x00, 0x7f, 0x00, 0x00, 0x00, 0x00, 0x3f, 0x00, 0x00, 0xfc, 0x00, 0x00,
  0x00, 0x00, 0x1e, 0x00, 0x00, 0x78, 0x00, 0x00, 0x00, 0x00, 0x0c, 0xf0, 0x0f, 0x30, 0x00, 0x00,
  0x00, 0x00, 0x00, 0xfe, 0x7f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x80, 0xff, 0xff, 0x03, 0x00, 0x00, 0x00, 0x00, 0xc0, 0x1f, 0xf8, 0x03, 0x00, 0x00,
  0x00, 0x00, 0x80, 0x07, 0xe0, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xc0, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x01, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0xe0, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf0, 0x0f, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0xe0, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0x03, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x80, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x01, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};

const unsigned char logo4_bits[] = {
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x80, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0x03, 0x00, 0x00, 0x00,
  0x00, 0x00, 0xf0, 0xff, 0xff, 0x0f, 0x00, 0x00, 0x00, 0x00, 0xf8, 0xff, 0xff, 0x1f, 0x00, 0x00,
  0x00, 0x00, 0xf8, 0xff, 0xff, 0x1f, 0x00, 0x00, 0x00, 0x00, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0xc0, 0x30, 0x08, 0x02, 0x00, 0x00, 0x00, 0x00, 0xc0, 0x30, 0x0c, 0x07, 0x00, 0x00,
  0x00, 0x00, 0xc0, 0x30, 0x0c, 0x07, 0x00, 0x00, 0x00, 0x00, 0xc0, 0x30, 0x0c, 0x07, 0x00, 0x00,
  0x00, 0x00, 0xc0, 0x30, 0x0c, 0x07, 0x00, 0x00, 0x00, 0x00, 0xc0, 0x30, 0x0c, 0x07, 0x00, 0x00,
  0x00, 0x00, 0xc0, 0x30, 0x0c, 0x07, 0x00, 0x00, 0x00, 0x00, 0xc0, 0x30, 0x0c, 0x07, 0x00, 0x00,
  0x00, 0x00, 0xc0, 0x30, 0x0c, 0x07, 0x00, 0x00, 0x00, 0x00, 0xc0, 0x30, 0x0c, 0x07, 0x00, 0x00,
  0x00, 0x00, 0xc0, 0x30, 0x0c, 0x07, 0x00, 0x00, 0x00, 0x00, 0xc0, 0x30, 0x0c, 0x07, 0x00, 0x00,
  0x00, 0x00, 0xc0, 0x30, 0x0c, 0x07, 0x00, 0x00, 0x00, 0x00, 0xc0, 0x30, 0x0c, 0x07, 0x00, 0x00,
  0x00, 0x00, 0xc0, 0x30, 0x0c, 0x07, 0x00, 0x00, 0x00, 0x00, 0xc0, 0x30, 0x0c, 0x07, 0x00, 0x00,
  0x00, 0x00, 0xc0, 0x30, 0x0c, 0x07, 0x00, 0x00, 0x00, 0x00, 0xc0, 0x30, 0x0c, 0x07, 0x00, 0x00,
  0x00, 0x00, 0xc0, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x00, 0xc0, 0x01, 0x80, 0x07, 0x00, 0x00,
  0x00, 0x00, 0xc0, 0xff, 0xff, 0x03, 0x00, 0x00, 0x00, 0x00, 0x80, 0xff, 0xff, 0x03, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};
//绘制主界面
void drawMainMenu(int cell) {
  u8g2.firstPage();
  u8g2.setFont(u8g2_font_wqy12_t_gb2312);
  do {
    // 定义各个格子的文本文字
    const char* labels[4] = { "接受 ", "发送 ", "    WIFi ", "删除 " };

    const int cellWidth = 64;
    const int cellHeight = 32;


    // 循环绘制四个格子
    for (int i = 0; i < 4; i++) {
      int x = (i % 2) * cellWidth;
      int y = (i / 2) * cellHeight;  // 根据是否需要反色来设置颜色
      if (cell == i + 1) {
        u8g2.setDrawColor(1);                       // 黑色
        u8g2.drawBox(x, y, cellWidth, cellHeight);  // 绘反色背景
        u8g2.setDrawColor(0);                       //色文本
      } else {
        u8g2.setDrawColor(1);  // 黑色文本
      }

      // int strWidth = u8g2.getStrWidth(labels[i]);
      // int strHeight = u8g2.getMaxCharHeight();
      // u8g2.setCursor(x + (cellWidth - strWidth) / 2, y + (cellHeight + strHeight) / 2 - 1);
      // u8g2.print(labels[i]);
      if (i == 0) {
        u8g2.drawXBM(0, 0, 64, 32, logo1_bits);  // 绘制第一部分
      }
      if (i == 1) {
        u8g2.drawXBM(64, 0, 64, 32, logo2_bits);  // 绘制第二部分
      }
      if (i == 2) {
        u8g2.drawXBM(0, 32, 64, 32, logo3_bits);  // 绘制第三部分
      }
      if (i == 3) {
        u8g2.drawXBM(64, 32, 64, 32, logo4_bits);  // 绘制第四部分
      }
    }
  } while (u8g2.nextPage());
}


void drawReviceMenu(String filename, String filecode) {
  u8g2_uint_t w;
  u8g2.firstPage();
  u8g2.setFont(u8g2_font_wqy12_t_gb2312a);
  do {

    w = u8g2.getDisplayWidth();
    u8g2.drawBox(0, 0, w, 15);
    u8g2.setDrawColor(0);
    u8g2.setCursor(10, 12);
    u8g2.print("【返回上级 确认键】");

    u8g2.setDrawColor(1);
    u8g2.setCursor(0, 21);
    u8g2.print("------------------------");

    if (filename != "") {
      u8g2.setCursor(3, 30);
      u8g2.print("文件: ");
      u8g2.print(filename);
      u8g2.setCursor(3, 43);
      u8g2.print(filecode);
      u8g2.setCursor(3, 56);
      u8g2.print("已保存数: ");
      u8g2.print(myAnimalList.size() - 2);


    } else {
      for (int i = 25; i < 29; i++) {
        u8g2.setCursor(16, 41);
        u8g2.print("正在监听. . .");
      }
    }




  } while (u8g2.nextPage());
}

void drawSendMenu(int inde) {
  int8_t h;
  int a1;
  u8g2_uint_t w;
  u8g2.firstPage();
  u8g2.setFont(u8g2_font_wqy12_t_gb2312a);
  w = u8g2.getDisplayWidth();
  int Listsize;

  do {

    u8g2.drawBox(0, 0, w, 15);
    u8g2.setDrawColor(0);

    u8g2.setCursor(6, 12);
    u8g2.print("【 发射菜单 】");
    u8g2.print(" " + String(myAnimalList.size() - 2));
    Listsize = myAnimalList.size() - 1;
    u8g2.setDrawColor(1);
    for (int i = 0; i < 4; i++) {

      if (i + inde < Listsize) {
        u8g2.drawBox(0, 15 + (12 * i), 22, 15);
        u8g2.setDrawColor(0);
        u8g2.setCursor(2, 27 + (12 * i));
        u8g2.print(String(i + inde));
        u8g2.setDrawColor(1);

        u8g2.setCursor(36, 27 + (12 * i));
        u8g2.print(retList(i + inde));  //String((menu.Count ) + i) + "." +
      }
    }
    u8g2.setFont(u8g2_font_open_iconic_all_1x_t);
    u8g2.drawGlyph(24, 26, 111);
  } while (u8g2.nextPage());
}

void drawWIFIMenu() {
  u8g2_uint_t w;
  u8g2.firstPage();
  u8g2.setFont(u8g2_font_wqy12_t_gb2312a);
  do {

    w = u8g2.getDisplayWidth();
    u8g2.drawBox(0, 0, w, 15);
    u8g2.setDrawColor(0);
    u8g2.setCursor(10, 12);
    u8g2.print("【返回上级 确认键】");

    u8g2.setDrawColor(1);
    u8g2.setCursor(0, 21);
    u8g2.print("------------------------");


    u8g2.setCursor(3, 30);
    u8g2.print("已经开启AP模式");
    u8g2.setCursor(3, 43);
    u8g2.print("请链接WIFI");
    u8g2.setCursor(3, 56);
    u8g2.print("IP:192.168.0.1");

  } while (u8g2.nextPage());
}

void drawDelMenu(int inde) {
  int8_t h;
  int a1;
  u8g2_uint_t w;
  u8g2.firstPage();
  u8g2.setFont(u8g2_font_wqy12_t_gb2312a);
  w = u8g2.getDisplayWidth();
  int Listsize;
  u8g2.setDrawColor(1);

  do {

    u8g2.drawBox(0, 0, w, 15);
    u8g2.setDrawColor(0);

    u8g2.setCursor(6, 12);
    u8g2.print("【 删除菜单 】");

    if (myAnimalList.size() - 2 == 0) {
      Listsize = myAnimalList.size() - 1;
      u8g2.print(" " + String(myAnimalList.size() - 2));
    } else {
      Listsize = myAnimalList.size();
      u8g2.print(" " + String(myAnimalList.size() - 2));
    }
    u8g2.setDrawColor(1);
    for (int i = 0; i < 4; i++) {

      if (i + inde < Listsize) {
        u8g2.drawBox(0, 15 + (12 * i), 22, 15);
        u8g2.setDrawColor(0);
        u8g2.setCursor(2, 27 + (12 * i));
        u8g2.print(String(i + inde));
        u8g2.setDrawColor(1);

        u8g2.setCursor(36, 27 + (12 * i));
        u8g2.print(retList(i + inde));  //String((menu.Count ) + i) + "." +
      }
    }
    u8g2.setFont(u8g2_font_open_iconic_all_1x_t);
    u8g2.drawGlyph(24, 26, 111);
  } while (u8g2.nextPage());
}